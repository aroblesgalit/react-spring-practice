{"version":3,"sources":["components/MemoryMatchCard/index.js","components/MemoryMatchCards/index.js","pages/MemoryMatch.js","App.js","index.js"],"names":["MemoryMatchCard","props","id","url","title","flipped","matched","handleFlip","cardAnim","className","div","onClick","style","src","alt","MemoryMatchCards","cardsData","useState","cards","setCards","matches","setMatches","flippedCards","setFlippedCards","disableClick","setDisableClick","useEffect","shuffleDeck","useSpring","to","transform","from","config","mass","tension","friction","duration","origDeck","shuffledDeck","i","length","randomIndex","Math","floor","random","card","splice","push","flipCard","tempDeck","tempFlippedCards","find","setTimeout","map","key","tempCards","restartGame","MemoryMatch","App","path","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.7c228264.chunk.js","sourcesContent":["import React from 'react';\r\nimport { animated as a } from 'react-spring';\r\nimport './MemoryMatchCard.scss';\r\n\r\nexport default function MemoryMatchCard(props) {\r\n\r\n    const { id, url, title, flipped, matched, handleFlip, cardAnim } = props;\r\n\r\n    return (\r\n        <div className='card-wrapper'>\r\n            <a.div className={`card ${flipped && matched ? 'is-flipped' : ''}`} onClick={() => handleFlip(id)} style={flipped && matched ? {} : ( flipped ? cardAnim : {}) }>\r\n                <div className='card-front' >\r\n                    <img src={url} alt={title} />\r\n                </div>\r\n                <div className='card-back'>\r\n                    <img src='https://www.freeiconspng.com/thumbs/pokeball-png/pokeball-clip-art-png-14.png' alt=\"pokeball\" />\r\n                </div>\r\n            </a.div>\r\n        </div>\r\n    )\r\n}\r\n","import React, { useState, useEffect } from 'react';\r\nimport { useSpring } from 'react-spring';\r\nimport './MemoryMatchCards.scss';\r\nimport MemoryMatchCard from '../MemoryMatchCard';\r\n\r\nexport default function MemoryMatchCards() {\r\n\r\n    const cardsData = [\r\n        { id: 1, url: 'https://images-wixmp-ed30a86b8c4ca887773594c2.wixmp.com/f/9a57d7be-b443-4e47-9fed-885821efa9c2/d3cxmmg-ff4ca333-94df-42dc-b1bd-c2c644eada4b.jpg?token=eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJ1cm46YXBwOiIsImlzcyI6InVybjphcHA6Iiwib2JqIjpbW3sicGF0aCI6IlwvZlwvOWE1N2Q3YmUtYjQ0My00ZTQ3LTlmZWQtODg1ODIxZWZhOWMyXC9kM2N4bW1nLWZmNGNhMzMzLTk0ZGYtNDJkYy1iMWJkLWMyYzY0NGVhZGE0Yi5qcGcifV1dLCJhdWQiOlsidXJuOnNlcnZpY2U6ZmlsZS5kb3dubG9hZCJdfQ.sDPKfpg4_QtpREAZoZVmwldIZ8sGKiSdmWkG46VJi_4', title: 'Bulbasaur', flipped: false, matched: false },\r\n        { id: 2, url: 'https://cdn140.picsart.com/280351317015211.png?type=webp&to=min&r=240', title: 'Squirtle', flipped: false, matched: false },\r\n        { id: 3, url: 'https://i.pinimg.com/originals/1c/89/f6/1c89f6668af718874d2cbbe6ff770efd.jpg', title: 'Charmander', flipped: false, matched: false },\r\n        { id: 4, url: 'https://img.memecdn.com/kawaii-pikachu_o_3353575.jpg', title: 'Pikachu', flipped: false, matched: false },\r\n        { id: 5, url: 'https://images-wixmp-ed30a86b8c4ca887773594c2.wixmp.com/f/9a57d7be-b443-4e47-9fed-885821efa9c2/d3cxmmg-ff4ca333-94df-42dc-b1bd-c2c644eada4b.jpg?token=eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJ1cm46YXBwOiIsImlzcyI6InVybjphcHA6Iiwib2JqIjpbW3sicGF0aCI6IlwvZlwvOWE1N2Q3YmUtYjQ0My00ZTQ3LTlmZWQtODg1ODIxZWZhOWMyXC9kM2N4bW1nLWZmNGNhMzMzLTk0ZGYtNDJkYy1iMWJkLWMyYzY0NGVhZGE0Yi5qcGcifV1dLCJhdWQiOlsidXJuOnNlcnZpY2U6ZmlsZS5kb3dubG9hZCJdfQ.sDPKfpg4_QtpREAZoZVmwldIZ8sGKiSdmWkG46VJi_4', title: 'Bulbasaur', flipped: false, matched: false },\r\n        { id: 6, url: 'https://cdn140.picsart.com/280351317015211.png?type=webp&to=min&r=240', title: 'Squirtle', flipped: false, matched: false },\r\n        { id: 7, url: 'https://i.pinimg.com/originals/1c/89/f6/1c89f6668af718874d2cbbe6ff770efd.jpg', title: 'Charmander', flipped: false, matched: false },\r\n        { id: 8, url: 'https://img.memecdn.com/kawaii-pikachu_o_3353575.jpg', title: 'Pikachu', flipped: false, matched: false },\r\n        { id: 9, url: 'https://i.pinimg.com/originals/98/2a/b6/982ab66f09a7cc30332ebd73cb4ab4fc.png', title: 'Meowth', flipped: false, matched: false },\r\n        { id: 10, url: 'https://i.pinimg.com/originals/c5/0e/a6/c50ea636e1b9712025c0a2564d0690d2.png', title: 'Psyduck', flipped: false, matched: false },\r\n        { id: 11, url: 'https://i.pinimg.com/originals/98/2a/b6/982ab66f09a7cc30332ebd73cb4ab4fc.png', title: 'Meowth', flipped: false, matched: false },\r\n        { id: 12, url: 'https://i.pinimg.com/originals/c5/0e/a6/c50ea636e1b9712025c0a2564d0690d2.png', title: 'Psyduck', flipped: false, matched: false }\r\n\r\n    ];\r\n\r\n    // Deck state\r\n    const [cards, setCards] = useState([]);\r\n    // Number of matches state\r\n    const [matches, setMatches] = useState(0);\r\n    // First flipped card state\r\n    const [flippedCards, setFlippedCards] = useState([]);\r\n    // Disable click state\r\n    const [disableClick, setDisableClick] = useState(false);\r\n\r\n    useEffect(() => {\r\n        shuffleDeck(cardsData);\r\n    }, []);\r\n\r\n    // Animation for flipping cards\r\n    const cardAnim = useSpring({\r\n        to: { transform: 'rotateY(180deg)' },\r\n        from: { transform: 'rotateY(0deg)' },\r\n        config: { mass: 1, tension: 500, friction: 50 },\r\n        duration: 200\r\n    });\r\n\r\n    // Shuffle deck\r\n    // Get length of deck\r\n    // Create new array\r\n    // Randomize num and add it to new array and subtract from original array then repeat until original array is empty\r\n    function shuffleDeck(cards) {\r\n        let origDeck = [...cards];\r\n        const shuffledDeck = [];\r\n        for (let i = cards.length - 1; i >= 0; i--) {\r\n            let randomIndex = Math.floor(Math.random() * origDeck.length);\r\n            let card = origDeck.splice(randomIndex, 1);\r\n            shuffledDeck.push(...card);\r\n        }\r\n        setCards(shuffledDeck);\r\n        setDisableClick(false);\r\n    };\r\n\r\n    // Handler for flipping a card\r\n    function flipCard(id) {\r\n        const tempDeck = [...cards];\r\n        const tempFlippedCards = [...flippedCards];\r\n        const card = tempDeck.find(card => card.id === id);\r\n        tempFlippedCards.push(card);\r\n        // If only 1 card is flipped\r\n        if (tempFlippedCards.length === 1 && card.flipped === false && disableClick === false) {\r\n            card.flipped = true;\r\n            setFlippedCards(tempFlippedCards);\r\n            setCards(tempDeck);\r\n            // If two cards are flipped\r\n        } else if (tempFlippedCards.length === 2 && card.flipped === false && disableClick === false) {\r\n            setDisableClick(true);\r\n            card.flipped = true;\r\n            setCards(tempDeck);\r\n            // Check for match\r\n            if (tempFlippedCards[0].title === tempFlippedCards[1].title) {\r\n                const card1 = tempDeck.find(card => card.id === tempFlippedCards[0].id);\r\n                card1.matched = true;\r\n                card.matched = true;\r\n                setCards(tempDeck);\r\n                setMatches(matches + 1);\r\n                setFlippedCards([]);\r\n                setDisableClick(false);\r\n            } else {\r\n                setTimeout(() => {\r\n                    const card1 = tempDeck.find(card => card.id === tempFlippedCards[0].id);\r\n                    card1.flipped = false;\r\n                    card.flipped = false;\r\n                    setCards(tempDeck);\r\n                    setFlippedCards([]);\r\n                    setTimeout(() => {\r\n                        setDisableClick(false);\r\n                    }, 500)\r\n                }, 1000);\r\n            }\r\n        }\r\n    };\r\n\r\n    function restartGame() {\r\n        setDisableClick(true);\r\n        const tempCards = [...cards];\r\n        setMatches(0);\r\n        setFlippedCards([]);\r\n        tempCards.map(card => {\r\n            card.flipped = false;\r\n            card.matched = false;\r\n        });\r\n        setTimeout(() => {\r\n            shuffleDeck(tempCards);\r\n        }, 1500)\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <div className='cards'>\r\n                {\r\n                    cards.map(card => {\r\n                        const { id, url, title, flipped, matched } = card;\r\n                        return (\r\n                            <MemoryMatchCard\r\n                                key={id}\r\n                                id={id}\r\n                                url={url}\r\n                                title={title}\r\n                                flipped={flipped}\r\n                                matched={matched}\r\n                                handleFlip={flipCard}\r\n                                cardAnim={cardAnim}\r\n                            />\r\n                        )\r\n                    })\r\n                }\r\n            </div>\r\n            {\r\n                matches === cards.length / 2 ? <button onClick={() => restartGame()}>play again</button> : ''\r\n            }\r\n        </>\r\n    )\r\n}\r\n","import React from 'react';\r\nimport MemoryMatchCards from '../components/MemoryMatchCards';\r\nimport './pages.scss';\r\n\r\nexport default function MemoryMatch() {\r\n    return (\r\n        <div className='container memory-match'>\r\n            <h1>Card Memory Matching Game</h1>\r\n            <MemoryMatchCards />\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\nimport MemoryMatch from './pages/MemoryMatch';\nimport './App.css';\n\nfunction App() {\n  return (\n    <Router>\n      <Switch>\n        <Route path=\"/\">\n          <MemoryMatch />\n        </Route>\n      </Switch>\n    </Router>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}